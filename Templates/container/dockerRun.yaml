parameters:
  - name: buildType
    default: 'c'
 
steps:
- script: |
    docker pull yamandevops/debian:9 
    docker run -d --name $(Build.Repository.Name) -v $(Build.SourcesDirectory):/opt/app -it docker.io/yamandevops/debian:9 /bin/bash
    docker exec $(Build.Repository.Name) bash -c "cd /opt/app/Trunk/C-Fontes/ptptrpro && make -f Makefile.freeimage clean && make -f Makefile.freeimage all"
    # cd /opt/app/Trunk/C-Fontes/ptptrpro
    # make -f Makefile.FreeImage all
    
    repo="perto-${{ parameters.buildType }}/$(Build.Repository.Name)"
    artifactPath="$(Build.SourcesDirectory)/Trunk/C-Fontes/ptptrpro/"
    artifact="*.so*"

    # URL de destino no Nexus
    URL_DESTINO="$(nexusHost)/repository/$repo"

    # Encontrar o caminho completo do arquivo
    ARQUIVO_ENVIAR=$(find "$artifactPath" -name "$artifact" -type f)

    # Verificar se um arquivo foi encontrado
    if [ -z "$ARQUIVO_ENVIAR" ]; then
      echo "Nenhum arquivo correspondente encontrado em $artifactPath com o padrão $artifact"
      exit 1
    fi

    # Comando curl para enviar o arquivo
    curl -u "$(nexusUser):$(nexusPass)" --upload-file "$ARQUIVO_ENVIAR" "$(nexusHost)/repository/$repo/"

    # Imprimir mensagem de conclusão
    echo "Arquivo $ARQUIVO_ENVIAR enviado para $URL_DESTINO"

    docker rm -f $(Build.Repository.Name)

  displayName: 'Execute Script inside Container'
  condition: succeeded()
  continueOnError: false
 
# - task: PublishBuildArtifacts@1
#   displayName: "Publish image debian 9"
#   condition: succeededOrFailed()
#   inputs:
#     PathtoPublish: "$(Build.ArtifactStagingDirectory)/debian-9"
#     ArtifactName: "debian-9"
#     publishLocation: "Container"